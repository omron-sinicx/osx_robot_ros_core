<?xml version="1.0"?>
<launch>
  <!-- Robot parameters that are separate for a_bot and b_bot -->
  <arg name="robot_ip_a" default="192.168.1.41"/>
  <arg name="robot_ip_b" default="192.168.1.42"/>
  
  <arg name="reverse_port_a" default="50001" />
  <arg name="script_sender_port_a" default="50002" />
  <arg name="trajectory_port_a" default="50005" doc="The driver will offer an interface to receive complete trajectories on this port. To use this, make sure a pass_through_controller is running. See the controller documentation for details."/>
  <arg name="script_command_port_a" default="50006" doc="Port used for forwarding script commands to the robot. The script commands will be executed locally on the robot."/>

  <arg name="reverse_port_b" default="50003" doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller."/>
  <arg name="script_sender_port_b" default="50004" doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately."/>
  <arg name="trajectory_port_b" default="50007" doc="The driver will offer an interface to receive complete trajectories on this port. To use this, make sure a pass_through_controller is running. See the controller documentation for details."/>
  <arg name="script_command_port_b" default="50008" doc="Port used for forwarding script commands to the robot. The script commands will be executed locally on the robot."/>

  <arg name="use_tool_communication_a" default="false"/>
  <arg name="use_tool_communication_b" default="false" doc="On e-Series robots tool communication can be enabled with this argument"/>
  <arg name="tool_device_name_a" default="/tmp/ttyUR_a"/>
  <arg name="tool_device_name_b" default="/tmp/ttyUR_b" doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tcp_port_a" default="54321"/>
  <arg name="tool_tcp_port_b" default="54322" doc="Port on which the robot controller publishes the tool comm interface. Only used, when `use_tool_communication` is set to true."/>
  <arg name="controller_config_file_a" default="$(find osx_scene_description)/config/a_bot_controllers.yaml"/>
  <arg name="controller_config_file_b" default="$(find osx_scene_description)/config/b_bot_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="kinematics_config_a" default="$(find osx_scene_description)/config/a_bot_calibration.yaml"/>
  <arg name="kinematics_config_b" default="$(find osx_scene_description)/config/b_bot_calibration.yaml" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description."/>
  
  <!-- Parameters that are shared between a_bot and b_bot -->
  <arg name="tf_prefix_a_bot" default="a_bot_" doc="tf_prefix used for the robot."/>
  <arg name="tf_prefix_b_bot" default="b_bot_" doc="tf_prefix used for the robot."/>
  <arg name="headless_mode" default="false" doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot."/>
  <arg name="controllers" default="joint_state_controller scaled_pos_joint_traj_controller speed_scaling_state_controller force_torque_sensor_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="pos_joint_traj_controller cartesian_compliance_controller" doc="Controllers that are initally loaded, but not started."/>
  <arg name="tool_voltage" default="0" doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_parity" default="0" doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_baud_rate" default="115200" doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_stop_bits" default="1" doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_rx_idle_chars" default="1.5" doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tx_idle_chars" default="3.5" doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <!-- <arg name="controller_config_file" default="$(find ur_robot_driver)/config/ur5_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/> -->
  <arg name="robot_description_file" default="$(find osx_scene_description)/launch/base_scene_upload.launch" doc="Robot description launch file."/>
  <arg name="robot_receive_timeout" default="0.2" doc="Timeout for the robot to respond to a command. This is used to prevent the robot from hanging if it does not respond to a command."/>

  <!-- Remap force-torque sensor topic for cartesian_compliance_controller -->
  <node name="a_bot_ft_filter" pkg="ur_control" type="ft_filter.py" args="-z -t wrench -ns a_bot" output="screen" />
  <node name="b_bot_ft_filter" pkg="ur_control" type="ft_filter.py" args="-z -t wrench -ns b_bot" output="screen" />
  
  <remap from="/a_bot/cartesian_compliance_controller/ft_sensor_wrench" to="/a_bot/wrench/filtered"/>
  <remap from="/b_bot/cartesian_compliance_controller/ft_sensor_wrench" to="/b_bot/wrench/filtered"/>

  <!-- Knife pose wrt sensor (rough approx) the actual pose is [0.0, -0.13, 0.188]-->
  <rosparam param="/b_bot/wrench/tcp/pose_sensor_to_tcp">[0.0, -0.13, 0.0]</rosparam>

  <!-- GDB functionality -->
  <arg name="debug" default="false" doc="If set to true, will start the driver inside gdb" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <!-- ======================================================= -->
  <!-- Centralize joint_states -->
  <remap from="/a_bot/joint_states" to="/joint_states"/>
  <remap from="/b_bot/joint_states" to="/joint_states"/>

  <!-- Grippers -->
  <include file="$(find robotiq_control)/launch/urcap_cmodel_action_controller.launch">
    <arg name="namespace" value="a_bot" />
    <arg name="gripper_prefix" value="a_bot_" />
    <arg name="address" value="$(arg robot_ip_a)" />
    <arg name="config" value="cmodel_action_controller_140" />
  </include>

  <include file="$(find robotiq_control)/launch/urcap_cmodel_action_controller.launch">
    <arg name="namespace" value="b_bot" />
    <arg name="gripper_prefix" value="b_bot_" />
    <arg name="address" value="$(arg robot_ip_b)" />
    <arg name="config" value="cmodel_action_controller_85" />
  </include>
  <!-- ======================================================= -->
  
  <!-- robot model -->
  <include file="$(arg robot_description_file)">
  </include>

  <!-- Convert joint states to /tf tranforms -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <!-- Adapted from ur5e_bringup.launch -->
  <param name="/a_bot/ur_hardware_interface/dashboard/receive_timeout" type="double" value="3.0" />
  <include file="$(find osx_scene_description)/launch/ur_common.launch" ns="a_bot">
    <arg name="debug" value="$(arg debug)"/>
    <arg name="use_tool_communication" value="$(arg use_tool_communication_a)"/>
    <arg name="controller_config_file" value="$(arg controller_config_file_a)"/>
    <arg name="robot_description_file" value="$(arg robot_description_file)"/>
    <arg name="kinematics_config" value="$(arg kinematics_config_a)"/>
    <arg name="robot_ip" value="$(arg robot_ip_a)"/>
    <arg name="reverse_port" value="$(arg reverse_port_a)"/>
    <arg name="script_sender_port" value="$(arg script_sender_port_a)"/>
    <arg name="trajectory_port" value="$(arg trajectory_port_a)"/>
    <arg name="script_command_port" value="$(arg script_command_port_a)"/>
    <arg name="tf_prefix" value="$(arg tf_prefix_a_bot)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
    <arg name="headless_mode" value="$(arg headless_mode)"/>
    <arg name="tool_voltage" value="$(arg tool_voltage)"/>
    <arg name="tool_parity" value="$(arg tool_parity)"/>
    <arg name="tool_baud_rate" value="$(arg tool_baud_rate)"/>
    <arg name="tool_stop_bits" value="$(arg tool_stop_bits)"/>
    <arg name="tool_rx_idle_chars" value="$(arg tool_rx_idle_chars)"/>
    <arg name="tool_tx_idle_chars" value="$(arg tool_tx_idle_chars)"/>
    <arg name="tool_device_name" value="$(arg tool_device_name_a)"/>
    <arg name="tool_tcp_port" value="$(arg tool_tcp_port_a)"/>
    <arg name="robot_receive_timeout" value="$(arg robot_receive_timeout)" />
  </include>
  
  <param name="/b_bot/ur_hardware_interface/dashboard/receive_timeout" type="double" value="3.0" />
  <include file="$(find osx_scene_description)/launch/ur_common.launch" ns="b_bot">
    <arg name="debug" value="$(arg debug)"/>
    <arg name="use_tool_communication" value="$(arg use_tool_communication_b)"/>
    <arg name="controller_config_file" value="$(arg controller_config_file_b)"/>
    <arg name="robot_description_file" value="$(arg robot_description_file)"/>
    <arg name="kinematics_config" value="$(arg kinematics_config_b)"/>
    <arg name="robot_ip" value="$(arg robot_ip_b)"/>
    <arg name="reverse_port" value="$(arg reverse_port_b)"/>
    <arg name="script_sender_port" value="$(arg script_sender_port_b)"/>
    <arg name="trajectory_port" value="$(arg trajectory_port_b)"/>
    <arg name="script_command_port" value="$(arg script_command_port_b)"/>
    <arg name="tf_prefix" value="$(arg tf_prefix_b_bot)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
    <arg name="headless_mode" value="$(arg headless_mode)"/>
    <arg name="tool_voltage" value="$(arg tool_voltage)"/>
    <arg name="tool_parity" value="$(arg tool_parity)"/>
    <arg name="tool_baud_rate" value="$(arg tool_baud_rate)"/>
    <arg name="tool_stop_bits" value="$(arg tool_stop_bits)"/>
    <arg name="tool_rx_idle_chars" value="$(arg tool_rx_idle_chars)"/>
    <arg name="tool_tx_idle_chars" value="$(arg tool_tx_idle_chars)"/>
    <arg name="tool_device_name" value="$(arg tool_device_name_b)"/>
    <arg name="tool_tcp_port" value="$(arg tool_tcp_port_b)"/>
    <arg name="robot_receive_timeout" value="$(arg robot_receive_timeout)" />
  </include>
  <!--  -->

  <!-- Can be used to aggregate joint state messages from both robots (to reduce update frequency)-->
  <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="false">
    <rosparam param="source_list">['/b_bot/joint_states','/a_bot/joint_states']</rosparam>
  </node>  -->

</launch>
